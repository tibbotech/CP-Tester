include "global.tbh"
include "display.tbh"

dim current_probe_info as probe_info
dim led_probe_timer, led_detect_timer as byte
dim pattern_timer as dword = sys.timercount32
dim detect_screen as boolean=false

'====================================================================
sub on_sys_init()
	
	init_LEDS()

end sub

sub on_sys_timer()
	
	select case current_probe_info.probe_type
		case NONE:
			detect_probe_type()
		case else:
			get_probe_reading()
	end select
		
end sub

sub detect_probe_type()
		
		if detect_screen=false then
			no_probe_detected_screen()
			detect_screen=true
		end if
		
		detect_probe_leds()		

		if tbt28_init(YES)=OK then
			current_probe_info.probe_type=LIGHT
			detect_screen=false
			light_screen()
		end if
		
		if tbt29_init(YES)=OK then
			current_probe_info.probe_type=TEMP
			detect_screen=false
			temp_screen()
		end if
		
		if tbt30_init(YES)=OK then
			current_probe_info.probe_type=TEMP_HUM
			detect_screen=false
			temp_hum_screen()
		end if
		
		if tbt35_init(YES)=OK then
			current_probe_info.probe_type=PRESSURE
			detect_screen=false
			pressure_screen()
		end if
		
		if tbt36_init(NO)=OK then
			current_probe_info.probe_type=ACCELEROMETER
			detect_screen=false
			accelerometer_screen()
		end if
		
	current_probe_info.reading=""
	
end sub

sub get_probe_reading()
	
	polling_probe_leds()
	
	select case current_probe_info.probe_type
	
	case LIGHT:
		if tbt28_check()<>OK then
			current_probe_info.probe_type=NONE
		end if
		update_light_reading()
	
	case TEMP: 
		if tbt29_check()<>OK then
				current_probe_info.probe_type=NONE
			end if
		update_temp_reading()
	
	case TEMP_HUM: 
		if tbt30_check()<>OK then
			current_probe_info.probe_type=NONE
		end if
		update_temp_hum_reading()

	case PRESSURE: 
		if tbt35_check()<>OK then
			current_probe_info.probe_type=NONE
		end if
		update_pressure_reading()

	case ACCELEROMETER: 
		if tbt36_check()<>OK then
			current_probe_info.probe_type=NONE
		end if
		update_accelerometer_reading()

	end select
	
end sub

function parse_two_decimal_places(s as string) as string
	
	dim decpoint as byte
	decpoint=instr(1,s,".",1)
	dim digitsafterpoint as byte=len(s)-decpoint
	if decpoint=0 then
		s=s+".00"
	else if digitsafterpoint=1 then
		s=s+"0"
	else if digitsafterpoint>2 then
		s=left(s,len(s)-digitsafterpoint+2)
	end if
	
	parse_two_decimal_places=s

end function

sub init_LEDS()
	
	lcd.width=320
	lcd.height=240
	io.num=PL_IO_NUM_55
	io.enabled=YES
	io.num=PL_IO_NUM_43
	io.enabled=YES
	io.num=PL_IO_NUM_42
	io.enabled=YES
	io.num=PL_IO_NUM_41
	io.enabled=YES
	io.num=PL_IO_NUM_40
	io.enabled=YES
	lcd.iomapping="55,43,42,41,40,0" 
	lcd.rotated=YES 
	lcd.enabled=YES
	io.num=PL_IO_NUM_54 
	io.enabled=YES
	io.state=LOW
	io.num=PL_IO_NUM_44
	io.enabled=YES
	io.state=LOW
	kp.returnlinesmapping="36,37,38,39"
	kp.enabled=YES
	beep.divider=0
	io.num=46
	io.enabled=YES
	io.num=47
	io.enabled=YES
	io.num=48
	io.enabled=YES
	set_LED(&b00000)
	beep.divider=21600
	beep.play("BB",PL_BEEP_CANINT)
	pat.play(PAT_THREE_SHORT_BOTH,PL_PAT_CANINT)
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	sys.timercountms=0
	while sys.timercountms<2000
	wend
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
end sub

sub polling_probe_leds()
	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	led_probe_timer=led_probe_timer+1
	if led_probe_timer>=2 then
		set_LED(&b00000)
		led_probe_timer=0
	else
		set_LED(&b11111)
	end if
			
end sub

sub detect_probe_leds()
	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if led_detect_timer<4 then
			led_detect_timer=led_detect_timer+1
		else
			led_detect_timer=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case led_detect_timer
	case 0:
		set_LED(&b00001)
	case 1:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 3:
		set_LED(&b01000)
	case 4:
		set_LED(&b10000)
	end select		

end sub 